<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tasks</title>
    <style>
        .edit-form { display: none; }
    </style>
</head>
<body>
    <h1>Your Tasks</h1>
    <ul id="taskList">
        <% tasks.forEach(task => { %>
            <li class="task-item" data-task-id="<%= task.id %>">
                <div class="task-display">
                    <span><%= task.title %> - <%= task.description %> (Due: <%= task.due_date ? new Date(task.due_date).toISOString().split('T')[0] : 'Not set' %>)</span>
                    <button onclick="showEditForm('<%= task.id %>')">Edit</button>
                    <button onclick="deleteTask('<%= task.id %>')">Delete</button>
                </div>
                <form class="edit-form" onsubmit="updateTask(event, '<%= task.id %>')">
                    <input type="text" name="title" value="<%= task.title %>" required>
                    <textarea name="description"><%= task.description %></textarea>
                    <input type="date" name="due_date" value="<%= task.due_date ? new Date(task.due_date).toISOString().split('T')[0] : '' %>">
                    <button type="submit">Update</button>
                    <button type="button" onclick="hideEditForm('<%= task.id %>')">Cancel</button>
                </form>
            </li>
        <% }) %>
    </ul>

    <h2>Add Task</h2>
    <form action="/tasks" method="POST">
        <label for="title">Title:</label>
        <input type="text" name="title" required>
        <label for="description">Description:</label>
        <textarea name="description"></textarea>
        <label for="due_date">Due Date:</label>
        <input type="date" name="due_date">
        <button type="submit">Add Task</button>
    </form>

    <script>
        function showEditForm(taskId) {
            document.querySelector(`li[data-task-id="${taskId}"] .task-display`).style.display = 'none';
            document.querySelector(`li[data-task-id="${taskId}"] .edit-form`).style.display = 'block';
        }

        function hideEditForm(taskId) {
            document.querySelector(`li[data-task-id="${taskId}"] .task-display`).style.display = 'block';
            document.querySelector(`li[data-task-id="${taskId}"] .edit-form`).style.display = 'none';
        }

        function updateTask(event, taskId) {
            event.preventDefault();
            const form = event.target;
            const formData = new FormData(form);
            const data = Object.fromEntries(formData);
            
            // Ensure the date is in the correct format (YYYY-MM-DD)
            if (data.due_date) {
                const date = new Date(data.due_date);
                data.due_date = date.toISOString().split('T')[0];
            }
            
            console.log('Updating task:', taskId, data);  // Debug log

            fetch(`/tasks/${taskId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data),
            })
            .then(response => {
                console.log('Response status:', response.status);  // Debug log
                if (!response.ok) {
                    return response.text().then(text => {
                        throw new Error(`HTTP error! status: ${response.status}, message: ${text}`);
                    });
                }
                return response.json();
            })
            .then(updatedTask => {
                console.log('Task updated:', updatedTask);  // Debug log
                const taskElement = document.querySelector(`li[data-task-id="${taskId}"]`);
                taskElement.querySelector('.task-display span').textContent = 
                    `${updatedTask.title} - ${updatedTask.description} (Due: ${updatedTask.due_date || 'Not set'})`;
                hideEditForm(taskId);
            })
            .catch(error => {
                console.error('Error updating task:', error);
                alert('Failed to update task. Please try again.');
            });
        }

        function deleteTask(taskId) {
            if (confirm('Are you sure you want to delete this task?')) {
                fetch(`/tasks/${taskId}`, {
                    method: 'DELETE',
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('Task deleted:', data);
                    document.querySelector(`li[data-task-id="${taskId}"]`).remove();
                })
                .catch(error => {
                    console.error('Error deleting task:', error);
                    alert('Failed to delete task. Please try again.');
                });
            }
        }
    </script>
</body>
</html>